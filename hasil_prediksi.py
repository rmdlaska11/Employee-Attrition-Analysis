# -*- coding: utf-8 -*-
"""Hasil Prediksi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IbKKDCNa9bCsWHSNBIP-_aXdlKxhlvki
"""

import gdown

!gdown --id '1LRBU3kWLVNnMRKvzNuKsZNVio8YvEHrY'

import joblib

# Replace 'your_file.joblib' with the actual filename
loaded_model = joblib.load('svm_model.pkl')

import pandas as pd
df = pd.read_csv("https://docs.google.com/spreadsheets/d/1DReaD8nQaj7-rNTH5PkgYDl_OdRtaqHqBBII6GDtOgM/export?format=csv")
inference_df = df.sample(n=10, random_state=42)
inference_df = inference_df.drop(columns='Attrition')
inference_df

from sklearn.preprocessing import LabelEncoder

# Identify categorical features - Assuming all object type columns are categorical
categorical_features = inference_df.select_dtypes(include=['object']).columns.tolist()

# Create and fit LabelEncoders for each categorical feature
encoders = {}
for feature in categorical_features:
    encoders[feature] = LabelEncoder()
    # Fit on the original dataframe to include all possible categories
    encoders[feature].fit(df[feature])

# Transform the inference data
for feature in categorical_features:
    inference_df[feature] = encoders[feature].transform(inference_df[feature])

# Now, inference_df has all numerical features
final_inference_df = inference_df  # You might not need to create a new DataFrame

# Ensure the column order matches the training data
training_columns = loaded_model.feature_names_in_  # Assuming your model has feature_names_in_ attribute
final_inference_df = final_inference_df[training_columns]

hasil_prediksi = loaded_model.predict(final_inference_df)

final_inference_df['Prediksi_Attrition'] = hasil_prediksi

# Menampilkan hasil prediksi
print("Hasil Prediksi: ")
final_inference_df[['EmployeeId', 'Prediksi_Attrition']]